/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.uam.eps.ir.ranksys.diversity.aggregate.metrics;

import es.uam.eps.ir.ranksys.core.IdDoublePair;
import es.uam.eps.ir.ranksys.core.Recommendation;
import es.uam.eps.ir.ranksys.metrics.AbstractSystemMetric;
import gnu.trove.impl.Constants;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.hash.TObjectIntHashMap;

/**
 *
 * @author Information Retrieval Group at Universidad Autonoma de Madrid, http://ir.ii.uam.es
 */
public class IUD<U, I> extends AbstractSystemMetric<U, I> {

    private final int cutoff;
    private final TObjectIntMap<I> userCount;
    private final int numUsers;

    public IUD(int cutoff, int numUsers) {
        this.cutoff = cutoff;
        this.userCount = new TObjectIntHashMap<>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR, 0);
        this.numUsers = numUsers;
    }

    @Override
    public void add(Recommendation<U, I> recommendation) {
        int rank = 0;
        for (IdDoublePair<I> ivp : recommendation.getItems()) {
            userCount.adjustOrPutValue(ivp.id, 1, 1);
            rank++;
            if (rank >= cutoff) {
                break;
            }
        }
    }

    @Override
    public double evaluate() {
        double[] iud = new double[0];
        
        userCount.forEachValue(c -> {
            iud[0] += c * (1 - c / (double) numUsers);
            return true;
        });
        
        iud[0] /= numUsers;
        
        return iud[0];
    }
}
